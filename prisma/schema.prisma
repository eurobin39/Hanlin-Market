// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  log      = ["query", "info", "warn", "error"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int        @id @default(autoincrement())
  username      String     @unique
  email         String?    @unique
  password      String?
  phone         String?    @unique
  github_id     String?    @unique
  avatar        String?
  createAt      DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  smsToken      smsToken[]
  product       Product[]
  chat_rooms    ChatRoom[] @relation("UserChatRooms") // 사용자가 속한 채팅방
  deletedByUser ChatRoom[] @relation("DeletedChatRooms") // 사용자가 삭제한 채팅방
  messages      Message[]
  like          Like[]
}

model smsToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  createAt  DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
}

model Product {
  id          Int        @id @default(autoincrement())
  title       String
  price       Float
  photo       String
  description String
  created_At  DateTime   @default(now())
  updated_At  DateTime   @updatedAt
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  ChatRooms   ChatRoom[]
  like        Like[]
}

model ChatRoom {
  id              String    @id @default(cuid())
  users           User[]    @relation("UserChatRooms")
  productId       Int
  product         Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  created_At      DateTime  @default(now())
  updated_At      DateTime  @updatedAt
  messages        Message[]
  deletedByUserId Int? // 채팅방을 삭제한 사용자의 ID
  deletedByUser   User?     @relation("DeletedChatRooms", fields: [deletedByUserId], references: [id])
}

model Message {
  id         Int      @id @default(autoincrement())
  payload    String
  room       ChatRoom @relation(fields: [chatRoomId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int
  chatRoomId String
  created_At DateTime @default(now())
  updated_At DateTime @updatedAt
}

model Like {
  created_At DateTime @default(now())
  updated_At DateTime @updatedAt

  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int

  @@id(name: "id", [userId, productId])
}
