// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  log      = ["query", "info", "warn", "error"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int            @id @default(autoincrement())
  username          String         @unique
  email             String?        @unique
  password          String?
  phone             String?        @unique
  github_id         String?        @unique
  avatar            String?
  createAt          DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  smsToken          smsToken[]
  product           Product[]
  chat_rooms        ChatRoom[]     @relation("UserChatRooms") // 사용자가 속한 채팅방
  deletedByUser     ChatRoom[]     @relation("DeletedChatRooms") // 사용자가 삭제한 채팅방
  messages          Message[]
  like              Like[]
  Home              Home[]
  Saved             Saved[]
  ChatHomeRoom      ChatHomeRoom[] @relation("UserChatHomeRooms")
  deleteHomedByUser ChatHomeRoom[] @relation("DeletedChatHomeRooms")
  HomeMessage       HomeMessage[]
  UserMessage       UserMessage[]
}

model smsToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  createAt  DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
}

model Product {
  id          Int        @id @default(autoincrement())
  title       String
  price       Float
  photo       String
  description String
  created_At  DateTime   @default(now())
  updated_At  DateTime   @updatedAt
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  ChatRooms   ChatRoom[]
  like        Like[]
  Saved       Saved[]
}

model Home {
  id            Int            @id @default(autoincrement())
  title         String
  price         Float
  photos        String[]
  description   String
  contractStart DateTime?
  contractEnd   DateTime?
  location      String
  created_At    DateTime       @default(now())
  updated_At    DateTime       @updatedAt
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        Int
  ChatHomeRooms ChatHomeRoom[]
  saved         Saved[]
  Like          Like[]
}

model ChatHomeRoom {
  id                  String        @id @default(cuid())
  users               User[]        @relation("UserChatHomeRooms")
  homeId              Int
  home                Home          @relation(fields: [homeId], references: [id], onDelete: Cascade)
  created_At          DateTime      @default(now())
  updated_At          DateTime      @updatedAt
  messages            Message[]
  deletedHomeByUserId Int?
  deleteHomedByUser   User?         @relation("DeletedChatHomeRooms", fields: [deletedHomeByUserId], references: [id]) // 올바른 필드 이름 사용
  HomeMessage         HomeMessage[]
}

model ChatRoom {
  id              String          @id @default(cuid())
  users           User[]          @relation("UserChatRooms")
  productId       Int
  product         Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
  created_At      DateTime        @default(now())
  updated_At      DateTime        @updatedAt
  messages        Message[]
  deletedByUserId Int?
  deletedByUser   User?           @relation("DeletedChatRooms", fields: [deletedByUserId], references: [id])
  RoomUserStates  RoomUserState[]
}

model RoomUserState {
  chatRoom   ChatRoom  @relation(fields: [chatRoomId], references: [id])
  chatRoomId String    
  userId     Int
  lastReadAt DateTime? @default(now())

  @@id([chatRoomId, userId])
  @@unique([userId, chatRoomId])
}

model HomeMessage {
  id         Int          @id @default(autoincrement())
  payload    String
  room       ChatHomeRoom @relation(fields: [chatRoomId], references: [id], onDelete: Cascade)
  user       User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int
  chatRoomId String
  created_At DateTime     @default(now())
  updated_At DateTime     @updatedAt
  isRead     Boolean      @default(false)
}

model Message {
  id             Int           @id @default(autoincrement())
  payload        String
  room           ChatRoom      @relation(fields: [chatRoomId], references: [id], onDelete: Cascade)
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         Int
  chatRoomId     String
  created_At     DateTime      @default(now())
  updated_At     DateTime      @updatedAt
  ChatHomeRoom   ChatHomeRoom? @relation(fields: [chatHomeRoomId], references: [id])
  chatHomeRoomId String?
  isRead         Boolean       @default(false)
  UserMessage    UserMessage[]
}

model Like {
  created_At DateTime @default(now())
  updated_At DateTime @updatedAt

  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  Home      Home?   @relation(fields: [homeId], references: [id])
  homeId    Int?

  @@id(name: "id", [userId, productId])
}

model UserMessage {
  id        Int       @id @default(autoincrement())
  userId    Int
  messageId Int
  readAt    DateTime?
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  message   Message   @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@unique([userId, messageId])
}

model Saved {
  created_At DateTime @default(now())
  updated_At DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  home      Home     @relation(fields: [homeId], references: [id], onDelete: Cascade)
  homeId    Int
  Product   Product? @relation(fields: [productId], references: [id])
  productId Int?

  @@id(name: "id", [userId, homeId])
}
